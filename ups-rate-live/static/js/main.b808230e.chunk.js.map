{"version":3,"sources":["PostList.js","App.js","serviceWorker.js","index.js"],"names":["PostList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fetchLimit","fetchCount","maxAge","subreddit","listings","posts","allListItems","componentDisplay","pollInterval","pollRef","componentDidMount","bind","assertThisInitialized","displayErrorMsg","reqData","validateUrl","createReq","sendReq","evaluateRes","handleAccepted","handleRejected","handleReqException","assignResData","updateReqSettings","evaluateReqSettings","getThumbProp","getCreatedProp","parseData","getPostAge","getPostUpsAvg","getPostTitleElement","getPostDetailsElement","getPostSourceElement","getPostElement","getListItems","sortListItems","filterListItems","handleSubmit","_this2","setState","props","setInterval","message","url","concat","Request","res","ok","json","clearInterval","console","log","status","statusText","rej","e","req","_this3","fetch","then","accepted","rejected","catch","_this4","toConsumableArray","_this5","_this6","data","after","thumb","substring","created_utc","_this7","knownPosts","unknownPosts","values","forEach","listing","children","child","keys","includes","id","ups","score","name","created","title","author","subreddit_name_prefixed","comments","permalink","domain","thumbnail","thumbHeight","thumbnail_height","thumbWidth","thumbnail_width","key","now","Math","round","path","react_default","a","createElement","className","href","target","rel","img","src","alt","style","justifyContent","post","_this8","Date","getTime","listItems","map","list","sort","b","_this9","filteredList","filter","length","event","_this10","preventDefault","type","val","document","getElementById","listNum","value","age","Fragment","color","role","aria-label","onSubmit","flexShrink","htmlFor","flexGrow","placeholder","onInput","Component","App","src_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b808230e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass PostList extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      fetchLimit: 2,\n      fetchCount: 0,\n      maxAge: 2,\n      subreddit: 'politics',\n      listings: [],\n      posts: [],\n      allListItems: [],\n      componentDisplay: 'loading...',\n      pollInterval: 60000,\n      pollRef: null,\n    }\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.displayErrorMsg = this.displayErrorMsg.bind(this);\n    this.reqData = this.reqData.bind(this);\n    this.validateUrl = this.validateUrl.bind(this);\n    this.createReq = this.createReq.bind(this);\n    this.sendReq = this.sendReq.bind(this);\n    this.evaluateRes = this.evaluateRes.bind(this);\n    this.handleAccepted = this.handleAccepted.bind(this);\n    this.handleRejected = this.handleRejected.bind(this);\n    this.handleReqException = this.handleReqException.bind(this);\n    this.assignResData = this.assignResData.bind(this);\n    this.updateReqSettings = this.updateReqSettings.bind(this);\n    this.evaluateReqSettings = this.evaluateReqSettings.bind(this);\n    this.getThumbProp = this.getThumbProp.bind(this);\n    this.getCreatedProp = this.getCreatedProp.bind(this);\n    this.parseData = this.parseData.bind(this);\n    this.getPostAge = this.getPostAge.bind(this);\n    this.getPostUpsAvg = this.getPostUpsAvg.bind(this);\n    this.getPostTitleElement = this.getPostTitleElement.bind(this);\n    this.getPostDetailsElement = this.getPostDetailsElement.bind(this);\n    this.getPostSourceElement = this.getPostSourceElement.bind(this);\n    this.getPostElement = this.getPostElement.bind(this);\n    this.getListItems = this.getListItems.bind(this);\n    this.sortListItems = this.sortListItems.bind(this);\n    this.filterListItems = this.filterListItems.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    // get initial data set\n    this.reqData();\n    // begin polling pollInterval, store reference for cancelling\n    this.setState((state, props) => { return { pollRef: setInterval(() => this.reqData(), this.state.pollInterval) } });\n  }\n\n  // assign error message to component display\n  // TODO: validate arg, use generic if invalid\n  displayErrorMsg(message) {\n    this.setState((state, props) => { return { componentDisplay: message }});\n  }\n\n  // request data set\n  reqData(url) {\n    this.sendReq(this.createReq(url));\n  }\n\n  // validate url for request\n  // TODO: validate further than prevent falsy arg\n  validateUrl(url) {\n    if (url) {\n      return url;\n    } else {\n      return `https://old.reddit.com/r/${ this.state.subreddit }.json?limit=100`;\n    }\n  }\n\n  // create request from url\n  // TODO: add object argument for settings\n  createReq(url) {\n    return new Request(this.validateUrl(url));\n  }\n\n  // handle sendReq fetch response\n  handleAccepted(res) {\n    if (res.ok) {\n      // handle valid response, return res.body as json for use in handleRes\n      return res.json();\n    } else {\n      // stop polling\n      clearInterval(this.state.pollRef);\n      // handle invalid response\n      console.log('network error:\\n', res); // LOG: response object\n      // display error\n      this.displayErrorMsg(`error: response from \"${res.url}\" was \"${res.status}: ${res.statusText}\".`);\n      // return null for use in handleRes\n      return null;\n    }\n  }\n\n  // handle sendReq fetch rejection\n  handleRejected(rej) {\n    // stop polling\n    clearInterval(this.state.pollRef);\n    // handle fetch rejection\n    console.log('fetch rejected:\\n', rej); // LOG: rejection object\n    // display error\n    this.displayErrorMsg(`error: request rejected, invalid search url or request blocked by browser. check search url, browser settings, or console for more details.`);\n    // call handleRes with null\n    return null;\n  }\n\n  // handle sendReq fetch exception\n  handleReqException(e) {\n    // stop polling\n    clearInterval(this.state.pollRef);\n    // handle fetch exception\n    console.log('fetch exception:\\n', e); // LOG: exception object\n    // display error\n    this.displayErrorMsg(`error: fetch exception, check console for details.`);\n  }\n\n  // send a request\n  sendReq(req) {\n    fetch(req)\n    .then((accepted) => this.handleAccepted(accepted), (rejected) => this.handleRejected(rejected))\n    .then((res) => this.evaluateRes(res))\n    .catch((e) => this.handleReqException(e));\n  }\n\n  // evaluate sendReq res\n  evaluateRes(res) {\n    console.log('server response:\\n', res); // DEBUG: log response from reddit\n    if (res) {\n      // res should contain valid data, assign to state\n      this.assignResData(res);\n    } else if (res !== null) {\n      // unexpected behavior that will cause errors, display message\n      this.displayErrorMsg(`error: evaluateRes passed non-null, falsy argument. check console for more details.`);\n    }\n  }\n\n  // assign response data to state, then update counter\n  assignResData(res) {\n    this.setState((state, props) => { return { listings: [...state.listings, res] } }, () => this.updateReqSettings());\n  }\n\n  // update request counter, then evaluate settings\n  updateReqSettings() {\n    this.setState((state, props) => { return { fetchCount: state.fetchCount + 1 } }, () => this.evaluateReqSettings());\n  }\n\n  // evaluate request settings to determine if another request is required or if data should be parsed\n  evaluateReqSettings() {\n    if (this.state.fetchCount < this.state.fetchLimit && this.state.listings[+this.state.fetchCount - 1].data.after) {\n      this.reqData(`https://old.reddit.com/r/${ this.state.subreddit }.json?limit=100&after=${ this.state.listings[this.state.fetchCount - 1].data.after }`);\n    } else {\n      this.setState((state, props) => { return { fetchCount: 0 } }, () => this.parseData());\n    };\n  }\n\n  // return valid url for thumb img\n  // TODO: investigate response data for patterns, different subs provide different values for this prop\n  getThumbProp(thumb) {\n    return thumb.substring(0, 4) !== 'http' ? `https://via.placeholder.com/140x90/333/FFF/?text=${ thumb }` : thumb;\n  }\n\n  // return converted time\n  getCreatedProp(created_utc) {\n    return created_utc * 1000;\n  }\n\n  // parse response data\n  // TODO: instead of storing posts then creating elements on the fly, store elements and update them on the fly?\n  parseData() {\n    // declarations\n    let knownPosts = this.state.posts;\n    let unknownPosts = [];\n    // look at each listing\n    Object.values(this.state.listings).forEach((listing) => {\n      // look at each post in listing\n      Object.values(listing.data.children).forEach((child) => {\n        if (Object.keys(this.state.posts).includes(child.data.id)) {\n          // post is currently in state\n          if (knownPosts[child.data.id].ups !== child.data.ups) {\n            // update post values\n            knownPosts[child.data.id].ups = child.data.ups;\n            knownPosts[child.data.id].score = child.data.score;\n          }\n        } else {\n          // post is not currently in state, assign relevant data to object\n          unknownPosts[child.data.id] = {\n            id: child.data.id,\n            name: child.data.name,\n            created: this.getCreatedProp(child.data.created_utc),\n            title: child.data.title,\n            author: child.data.author,\n            subreddit: child.data.subreddit_name_prefixed,\n            comments: child.data.permalink,\n            ups: child.data.ups,\n            score: child.data.score,\n            domain: child.data.domain,\n            url: child.data.url,\n            thumb: this.getThumbProp(child.data.thumbnail),\n            thumbHeight: child.data.thumbnail_height,\n            thumbWidth: child.data.thumbnail_width,\n          };\n        }\n      })\n    });\n    // combine post arrays\n    Object.keys(unknownPosts).forEach((key) => {\n      knownPosts[key] = unknownPosts[key];\n    });\n    // store posts then make list items from them\n    this.setState((state, props) => {\n      return {\n        listings: [],\n        posts: knownPosts,\n      }\n    }, () => this.getListItems());\n  }\n\n  // return post age as decimal representation of hours\n  getPostAge(created, now) {\n    return Math.round(((now - created) / 3600000) * 100) / 100;\n  }\n\n  // return decimal representation of average ups per hour\n  getPostUpsAvg(created, now, ups) {\n    return Math.round(((Math.round(ups / (Math.round(((now - created) / 3600000) * 100) / 100))) / 60) * 100) / 100;\n  }\n\n  // return post title div\n  getPostTitleElement(path, title) {\n    return (\n      <div className='title'>\n        <a href={ `https://reddit.com${ path }` } target='_blank' rel='noopener noreferrer'>{ title }</a>\n      </div>\n    );\n  }\n\n  // return post details div\n  getPostDetailsElement(ups, created, now, url, img, title) {\n    return (\n      <div className='details'>\n        <div className='stats'>\n          <span><p><span className='ups'>ups</span>: { ups }</p></span>\n          <span className='ages'><p>age: { this.getPostAge(created, now) }</p></span>\n          <span className='avgs'><p>{ this.getPostUpsAvg(created, now, ups) } <span className='ups'>ups</span>/min</p></span>\n        </div>\n        <a href={ url } target='_blank' rel='noopener noreferrer'><img src={ img } alt={ title }/></a>\n      </div>\n    );\n  }\n\n  // return post source div\n  // TODO: validate component sub value more thoroughly\n  getPostSourceElement(subreddit, domain) {\n    if (this.state.subreddit.substring(0, 3) === 'all') {\n      return (\n        <div className='source' style={{ justifyContent: 'space-between' }}>\n          <small>{ subreddit}</small>\n          <small>{ domain }</small>\n        </div>\n      );\n    } else {\n      return (\n        <div className='source' style={{ justifyContent: 'flex-end' }}>\n          <small>{ domain }</small>\n        </div>\n      );\n    }\n  }\n\n  // return post list item\n  getPostElement(post, now) {\n    return (\n      <li key={ post.id } >\n        { this.getPostTitleElement(post.comments, post.title) }\n        { this.getPostDetailsElement(post.ups, post.created, now, post.url, post.thumb, post.title) }\n        { this.getPostSourceElement(post.subreddit, post.domain) }\n      </li>\n    );\n  }\n\n  // set state with list item elements\n  getListItems() {\n    let now = new Date().getTime();\n    let listItems = Object.values(this.state.posts).map((post) => this.getPostElement(post, now));\n    listItems = this.sortListItems(listItems);\n    this.setState((state, props) => { return { allListItems: listItems } }, () => this.filterListItems());\n  }\n\n  // sort list items by ups average\n  sortListItems(list) {\n    return list.sort((a, b) => { return b.props.children[1].props.children[0].props.children[2].props.children.props.children[0] - a.props.children[1].props.children[0].props.children[2].props.children.props.children[0]})\n  }\n\n  // filter list items by age\n  // TODO: add buttons to alter the data set, maybe something like top/?sort=top&t=week, maybe use displayErrorMsg instead of direct set\n  filterListItems() {\n    let filteredList = this.state.allListItems.filter((title) => { return title.props.children[1].props.children[0].props.children[1].props.children.props.children[1] < this.state.maxAge });\n    if (filteredList.length === 0) {\n      filteredList = `0/${this.state.allListItems.length} posts with age under ${this.state.maxAge} hours.\\ntry increasing max age.\\n`;\n    } \n    this.setState((state, props) => { return { componentDisplay: filteredList }});\n  }\n\n  // handle component submit events\n  handleSubmit(event) {\n    event.preventDefault();\n    if (event.type === 'submit') {\n      let val = document.getElementById(`sub-value${ this.props.listNum }`).value;\n      if (val.length > 0) {\n        clearInterval(this.state.pollRef);\n        this.setState((state, props) => { \n          return { \n            subreddit: val,\n            listings: [],\n            posts: [],\n            allListItems: [],\n            componentDisplay: 'loading...',\n          }\n        }, () => {\n          this.reqData();\n          this.setState((state, props) => { return { pollRef: setInterval(() => this.reqData(), this.state.pollInterval) }});\n        });\n      }\n    } else if (event.type === 'input') {\n      let age = +event.target.value;\n      this.setState((state, props) => { return { maxAge: age }}, () => this.filterListItems() );\n    }\n  }\n\n  // 🔴 <- for copy paste purposes\n  render() {\n    return (\n      <React.Fragment>\n        <ul>\n          <li>\n            <div id='control-header'><span><span className='ups'>ups</span> rate <span style={{ color: 'red' }}>live</span></span><span id='live-indicator' role='img' aria-label='live indicator'>🔴</span></div>\n            <div id='controls'>\n              <div id='sub-controls'>\n              <form onSubmit={ this.handleSubmit }>\n                <label style={{flexShrink: '0'}} htmlFor={`sub-value${ this.props.listNum }`}><span id='full-sub-label'>subreddit: r/</span><span id='partial-sub-label'>r/</span></label>\n                <input style={{flexGrow: '0'}} type='text' id={`sub-value${ this.props.listNum }`} className='sub-value' placeholder={ this.state.subreddit }></input>\n                <input style={{flexGrow: '0'}} type='submit' id='sub-submit' value='submit' />\n              </form>\n              </div>\n              <div id='age-controls'>\n                <label style={{flexShrink: '0'}}>max age:</label>\n                <select id='age-select' onInput={ this.handleSubmit }>\n                  <option value='2'>2 hours</option>\n                  <option value='3'>3 hours</option>\n                  <option value='6'>6 hours</option>\n                  <option value='12'>12 hours</option>\n                  <option value='24'>24 hours</option>\n                </select>\n              </div>\n            </div>\n          </li>\n          { this.state.componentDisplay }\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PostList;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport PostList from './PostList.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <PostList listNum={ 1 } />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}