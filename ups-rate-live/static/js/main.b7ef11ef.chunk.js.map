{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fetchLimit","fetchCount","maxAge","subreddit","listings","posts","allTitles","displayTitles","interval","pollRef","reqData","bind","assertThisInitialized","handleRes","parseListings","getListItems","sortListItems","filterListItems","handleSubmit","componentDidMount","_this2","setState","props","setInterval","url","fetchUrl","req","_this3","concat","Request","fetch","then","fulfilled","json","rejected","console","log","toString","res","catch","err","_this4","error","message","toConsumableArray","data","after","_this5","combinedArr","tempPostsArr","values","forEach","listing","children","child","keys","includes","id","ups","score","name","created","created_utc","title","author","subreddit_name_prefixed","comments","permalink","domain","thumb","thumbnail","substring","thumbHeight","thumbnail_height","thumbWidth","thumbnail_width","key","_this6","now","Date","getTime","listItems","map","post","react_default","a","createElement","className","href","target","rel","Math","round","src","alt","style","justifyContent","list","sort","b","_this7","filteredList","filter","event","_this8","type","val","document","getElementById","value","length","clearInterval","age","Fragment","color","flexShrink","flexGrow","placeholder","onClick","onInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7ef11ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      fetchLimit: 2,\n      fetchCount: 0,\n      maxAge: 3,\n      subreddit: 'politics',\n      listings: [],\n      posts: [],\n      allTitles: [],\n      displayTitles: 'loading...',\n      interval: 60000,\n      pollRef: null,\n    }\n\n    this.reqData = this.reqData.bind(this);\n    this.handleRes = this.handleRes.bind(this);\n    this.parseListings = this.parseListings.bind(this);\n    this.getListItems = this.getListItems.bind(this);\n\n    this.sortListItems = this.sortListItems.bind(this);\n    this.filterListItems = this.filterListItems.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.reqData();\n    this.setState((state, props) => { return { pollRef: setInterval(() => this.reqData(), this.state.interval) }});\n  }\n\n  reqData(url) {\n    let fetchUrl, req;\n    url ? fetchUrl = url : fetchUrl = `https://old.reddit.com/r/${ this.state.subreddit }.json?limit=100`;\n    // console.log('fetchUrl:\\n', fetchUrl); // DEBUG: log req url\n    req = new Request(fetchUrl);\n    fetch(req)\n    .then((fulfilled) => { return fulfilled.json() }, (rejected) => {\n      console.log('fetch rejected:\\n', ( rejected.toString() )); // is 'TypeError: Failed to fetch'\n      // let error = rejected.toString();\n      this.setState((state, props) => { return { displayTitles: 'error: invalid subreddit, fetch rejected by browser, or reddit is down.'}});\n      // this.setState((state, props) => { return { displayTitles: error}});\n    })\n    .then((res) => { res ? this.handleRes(res) : console.log('falsy response:\\n', res) })\n    .catch((err) => console.log('fetch error:\\n', err));\n  }\n\n  handleRes(res) {\n    console.log('server response:\\n', res); // DEBUG: log response from reddit\n    if (res.error) {\n      this.setState((state, props) => { return { displayTitles: `${res.error}: ${res.message}` }});\n    } else {\n      this.setState((state, props) => {\n        return {\n          fetchCount: state.fetchCount + 1,\n          listings: [...state.listings, res]\n        }\n      }, () => {\n        if (this.state.fetchCount < this.state.fetchLimit && this.state.listings[+this.state.fetchCount - 1].data.after) {\n          this.reqData(`https://old.reddit.com/r/${ this.state.subreddit }.json?limit=100&after=${ this.state.listings[this.state.fetchCount - 1].data.after }`);\n        } else {\n          this.setState((state, props) => {\n            return {\n              fetchCount: 0\n            }\n          }, () => this.parseListings());\n        };\n      });\n    }\n    \n  }\n\n  parseListings() {\n    let combinedArr = this.state.posts;\n    let tempPostsArr = [];\n    Object.values(this.state.listings).forEach((listing) => {\n      Object.values(listing.data.children).forEach((child) => {\n        if (Object.keys(this.state.posts).includes(child.data.id)) {\n          if (combinedArr[child.data.id].ups !== child.data.ups) {\n            combinedArr[child.data.id].ups = child.data.ups;\n            combinedArr[child.data.id].score = child.data.score;\n          }\n        } else {\n          tempPostsArr[child.data.id] = {\n            id: child.data.id,\n            name: child.data.name,\n            created: child.data.created_utc * 1000,\n            title: child.data.title,\n            author: child.data.author,\n            subreddit: child.data.subreddit_name_prefixed,\n            comments: child.data.permalink,\n            ups: child.data.ups,\n            score: child.data.score,\n            domain: child.data.domain,\n            url: child.data.url,\n            thumb: child.data.thumbnail.substring(0, 4) !== 'http' ? `https://via.placeholder.com/140x90/333/FFF/?text=${ child.data.thumbnail }` : child.data.thumbnail,\n            thumbHeight: child.data.thumbnail_height,\n            thumbWidth: child.data.thumbnail_width,\n          };\n        }\n      })\n    });\n    Object.keys(tempPostsArr).forEach((key) => {\n      combinedArr[key] = tempPostsArr[key];\n    });\n    this.setState((state, props) => {\n      return {\n        listings: [],\n        posts: combinedArr,\n      }\n    }, () => this.getListItems());\n  }\n\n  getListItems() {\n    let now = new Date().getTime();\n    let listItems = Object.values(this.state.posts).map((post) => (\n      <li key={ post.id } >\n        <div className=\"title\">\n          <a href={ `https://reddit.com${post.comments}` } target='_blank' rel='noopener noreferrer'>\n            { post.title }\n          </a>\n        </div>\n        <div className='details'>\n          <div className='stats'>\n            <span>\n              <p><span className='ups'>ups</span>: { post.ups }</p>\n            </span>\n            <span className='ages'>\n              <p>age: { (Math.round(((now - post.created) / 3600000) * 100) / 100) }</p>\n            </span>\n            <span className='avgs'>\n              <p>{ Math.round(((Math.round(post.ups / (Math.round(((now - post.created) / 3600000) * 100) / 100))) / 60) * 100) / 100 } <span className='ups'>ups</span>/min</p>\n            </span>\n          </div>\n          <a href={ post.url } target='_blank' rel='noopener noreferrer'>\n            <img src={ post.thumb } alt={ post.title }/>\n          </a>\n        </div>\n        { this.state.subreddit.substring(0, 3) === 'all' ? \n          <div className='source' style={{ justifyContent: 'space-between' }}>\n            <small>{ post.subreddit}</small>\n            <small>{ post.domain }</small>\n          </div> : \n          <div className='source' style={{ justifyContent: 'flex-end' }}>\n            <small>{ post.domain }</small>\n          </div>\n        }\n      </li>\n    ));\n    listItems = this.sortListItems(listItems);\n    this.setState((state, props) => {\n      return { \n        allTitles: listItems,\n        displayTitles: listItems\n      }\n    }, () => {\n      // console.log('post response state:\\n', this.state, `\\nstate.posts.length: ${Object.keys(this.state.posts).length}`); // DEBUG: log state\n      this.filterListItems();\n    });\n  }\n\n  sortListItems(list) {\n    return list.sort((a, b) => { return b.props.children[1].props.children[0].props.children[2].props.children.props.children[0] - a.props.children[1].props.children[0].props.children[2].props.children.props.children[0]})\n  }\n\n  filterListItems() {\n    let filteredList = this.state.allTitles.filter((title) => { return title.props.children[1].props.children[0].props.children[1].props.children.props.children[1] < this.state.maxAge });\n    this.setState((state, props) => { return { displayTitles: filteredList }});\n    // this.setState((state, props) => { return { displayTitles: filteredList }}, () => console.log('post filter state:\\n', this.state, `\\nstate.displayTitles.length: ${ this.state.displayTitles.length }`));\n  }\n\n  handleSubmit(event) {\n    if (event.type === 'click') {\n      let val = document.getElementById('sub-input').value;\n      if (val.length > 0) {\n        clearInterval(this.state.pollRef);\n        this.setState((state, props) => { \n          return { \n            subreddit: val,\n            listings: [],\n            posts: [],\n            allTitles: [],\n            displayTitles: 'loading...',\n          }\n        }, () => {\n          this.reqData();\n          this.setState((state, props) => { return { pollRef: setInterval(() => this.reqData(), this.state.interval) }});\n        });\n      }\n      \n    } else if (event.type === 'input') {\n      let age = +event.target.value;\n      this.setState((state, props) => { return { maxAge: age }}, () => this.filterListItems() );\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ul>\n          <li>\n            <div id='control-header'><span className='ups'>ups</span> rate <span style={{ color: 'red' }}>live</span></div>\n            <div id='controls'>\n              <div id='sub-controls'>\n                <p style={{flexShrink: '0'}}>subreddit: r/</p>\n                <input style={{flexGrow: '0'}} type='text' id='sub-input' placeholder={ this.state.subreddit }></input>\n                <input style={{flexGrow: '0'}} type='submit' onClick={ this.handleSubmit } />\n              </div>\n              <div id='age-controls'>\n                <p style={{flexShrink: '0'}}>max age:</p>\n                <select onInput={ this.handleSubmit }>\n                  <option value='3'>3</option>\n                  <option value='6'>6</option>\n                  <option value='12'>12</option>\n                  <option value='24'>24</option>\n                </select>\n              </div>\n            </div>\n          </li>\n          { this.state.displayTitles }\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}